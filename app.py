import streamlit as st
from streamlit_autorefresh import st_autorefresh
import psycopg2
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

st.set_page_config(page_title="Dados Sisu", page_icon=":üìâ:", layout="wide")

# Database connection parameters
db_params = {
    "host": "postgres",
    "port": 5432,
    "user": "postgres",
    "password": "example",
    "database": "prouni"
}

# Retira fun√ß√µes do Streamlit no canto superior direito
hide_st_style = """
            <style>
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            header {visibility: hidden;}
            </style>
            """
st.markdown(hide_st_style, unsafe_allow_html=True)


# Criando dados aleat√≥rios para o exemplo
cidades = ['S√£o Paulo', 'Rio de Janeiro',
           'Belo Horizonte', 'Curitiba', 'Fortaleza']
dados = {'Cidade': cidades,
         'Popula√ß√£o': np.random.randint(25635, 652403, size=len(cidades)),
         'PIB': np.random.randint(15248652, 26352145, size=5, dtype=np.int64),
         'IDH': np.round(np.random.uniform(0.5, 1, size=len(cidades)), 2)}

# Criar uma fun√ß√£o para o menu HOME


def home():
    try:
        conn = psycopg2.connect(**db_params)
        cur = conn.cursor()

        # Fetch data from the database
        cur.execute("SELECT * FROM public.curso LIMIT 10")
        results = cur.fetchall()

        # Close the database connection
        cur.close()
        conn.close()

        # Display the fetched data in Streamlit
        st.write("Fetched Data:")
        for row in results:
            st.write(row)

        st.title("Panorama geral")
        st.write("Aqui est√° um resumo dos dados das cidades.")
        st.write('')

        # Dividindo a tela em duas colunas
        col1, col2 = st.columns(2)

        # Gr√°fico de barra com a popula√ß√£o das cidades
        with col1:
            fig1, ax1 = plt.subplots()
            ax1.bar(dados['Cidade'], dados['Popula√ß√£o'])
            ax1.set_ylabel('Popula√ß√£o')
            ax1.set_xticklabels(dados['Cidade'], rotation=90)
            st.pyplot(fig1)

        # Gr√°fico de barra com o PIB das cidades
        with col2:
            fig2, ax2 = plt.subplots()
            ax2.bar(dados['Cidade'], dados['PIB'])
            ax2.set_ylabel('PIB')
            ax2.set_xticklabels(dados['Cidade'], rotation=90)
            st.pyplot(fig2)

        # Dividindo a tela em duas colunas
        col3, col4 = st.columns(2)

        # Gr√°fico de barra com o IDH das cidades
        with col3:
            fig3, ax3 = plt.subplots()
            ax3.bar(dados['Cidade'], dados['IDH'])
            ax3.set_ylabel('IDH')
            ax3.set_xticklabels(dados['Cidade'], rotation=90)
            st.pyplot(fig3)

        # Gr√°fico de barra com a m√©dia da popula√ß√£o, PIB e IDH por regi√£o
        dados_regiao = pd.DataFrame({'Regi√£o': ['Sudeste', 'Sudeste', 'Sul', 'Nordeste', 'Sul'],
                                    'Popula√ß√£o': dados['Popula√ß√£o'],
                                     'PIB': dados['PIB'],
                                     'IDH': dados['IDH']})
        dados_regiao = dados_regiao.groupby('Regi√£o').mean().reset_index()

        with col4:
            fig4, ax4 = plt.subplots()
            ax4.bar(dados_regiao['Regi√£o'],
                    dados_regiao['Popula√ß√£o'], label='Popula√ß√£o')
            ax4.bar(dados_regiao['Regi√£o'], dados_regiao['PIB'], label='PIB')
            ax4.bar(dados_regiao['Regi√£o'], dados_regiao['IDH'], label='IDH')
            ax4.set_ylabel('M√©dia')
            ax4.legend()
            st.pyplot(fig4)

    except:
        st.write("Servidor de banco de dados iniciando, por favor aguarde")
        count = st_autorefresh(interval=5000, key='DataFrameRefresh')
        st.write("A p√°gina ser√° atualizada assim que o servidor estiver funcionando")
        st.write(count)


# Criar uma fun√ß√£o para a p√°gina Regi√µes


def regioes():
    st.title("Dados por regi√µes")
    st.write("Aqui est√£o os dados agrupados por regi√µes.")
    st.write('')

    # Adicione o filtro de data
    data_inicio = st.date_input("Selecione a data de in√≠cio")
    data_fim = st.date_input("Selecione a data de fim")

    # Crie o dataframe com dados das cidades/estados
    dados_cidades_estados = pd.DataFrame({
        'Cidade/Estado': ['S√£o Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Salvador', 'Fortaleza'],
        'Popula√ß√£o': [12325232, 6747815, 2521564, 2872347, 2686612]
    })

    # Ordene o dataframe pela popula√ß√£o
    dados_cidades_estados = dados_cidades_estados.sort_values(
        by='Popula√ß√£o', ascending=False)

    # Crie o gr√°fico de barras
    fig, ax = plt.subplots()
    ax.bar(dados_cidades_estados['Cidade/Estado'],
           dados_cidades_estados['Popula√ß√£o'])
    ax.set_ylabel('Popula√ß√£o')
    ax.set_xticklabels(dados_cidades_estados['Cidade/Estado'], rotation=90)

    # Exiba o gr√°fico no Streamlit
    st.pyplot(fig)


# Cria fun√ß√£o p√°gina Universidades
def universidade():
    st.title("Dados por universidade")
    st.write("Aqui est√£o os dados agrupados por universidades.")
    st.write('')

# Cria o DataFrame das universidades
    dados_universidade = pd.DataFrame({'Universidade': ['USP', 'UNICAMP', 'UFMG', 'UFRJ', 'UNESP', 'UFES', 'UFRGS'],
                                       'Popula√ß√£o': [152365, 111236, 132560, 125404, 121056, 114202, 110236]})
    dados_universidade = dados_universidade.sort_values(by='Universidade')

# Cria o gr√°fico
    fig, ax = plt.subplots(figsize=(4, 3))
    ax.bar(dados_universidade['Universidade'],
           dados_universidade['Popula√ß√£o'])
    ax.set_ylabel('Popula√ß√£o')
    ax.set_xticklabels(dados_universidade['Universidade'], rotation=90)

# Exibe o gr√°fico
    st.pyplot(fig)

# Cria a fun√ß√£o p√°gina Curso


def curso():
    st.title("Dados por curso")
    st.write("Aqui est√£o os dados agrupados por curso.")
    st.write('')

# Cria o DataFrame dos cursos
    dados_curso = pd.DataFrame({'Curso': ['Medicina', 'Sisitemas de Informa√ß√£o', 'Marketing', 'Engenharia Civil', 'Direito', 'Administra√ß√£o', 'COnt√°beis'],
                                'Popula√ß√£o': [152365, 111236, 132560, 125404, 121056, 114202, 110236]})
    dados_curso = dados_curso.sort_values(by='Curso')

# Cria o gr√°fico
    fig, ax = plt.subplots(figsize=(4, 3))
    ax.bar(dados_curso['Curso'],
           dados_curso['Popula√ß√£o'])
    ax.set_ylabel('Popula√ß√£o')
    ax.set_xticklabels(dados_curso['Curso'], rotation=85)

# Exibe o gr√°fico
    st.pyplot(fig)

    # Cria a fun√ß√£o p√°gina Distribui√ß√£o por idade


def idade():
    st.title("Dados por Idade")
    st.write("Aqui est√£o os dados agrupados por idade.")
    st.write('')

# Cria o DataFrame das idades
    dados_idade = pd.DataFrame({'Idade': ['18', '20', '25', '30', '32', '52', '40'],
                                'Popula√ß√£o': [12540, 11230, 10360, 15962, 15350, 14650, 10230]})


# Cria o gr√°fico
    fig, ax = plt.subplots()
    ax.bar(dados_idade['Idade'],
           dados_idade['Popula√ß√£o'], color='orange')
    ax.set_ylabel('Popula√ß√£o')
    ax.set_xticklabels(dados_idade['Idade'], rotation=85)

# Exibe o gr√°fico
    st.pyplot(fig)


# Criar o menu de navega√ß√£o do aplicativo
menu = ['Dados Gerais', 'Regi√µes', 'Universidade',
        'Cursos', 'Distribui√ß√£o por idade']
pagina = st.sidebar.selectbox("Selecione uma p√°gina:", menu)

# Exibir a p√°gina selecionada
if pagina == 'Dados Gerais':
    home()
elif pagina == 'Regi√µes':
    regioes()
elif pagina == "Universidade":
    universidade()
elif pagina == "Cursos":
    curso()
elif pagina == "Distribui√ß√£o por idade":
    idade()

# Path: Sisu\app.py
